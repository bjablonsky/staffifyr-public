@page "/personnel/{Id:int}"
@using System.ComponentModel.DataAnnotations
@inject PersonnelApiClient PersonnelApi
@inject NavigationManager NavigationManager

<PageTitle>Personnel</PageTitle>

<h1>Personnel</h1>

@if (personnel is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="personnel" OnValidSubmit="HandleValidSubmit" FormName="edit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input type="hidden" name="personnel.Id" value="@personnel.Id" />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="personnel.Name" />
        </div>

        <div class="mb-3">
            <label for="dateOfBirth" class="form-label">Date of Birth</label>
            <InputDate id="dateOfBirth" class="form-control" @bind-Value="personnel.DateOfBirth" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email Address</label>
            <InputText id="email" class="form-control" @bind-Value="personnel.EmailAddress" />
        </div>

        <div class="mb-3">
            <label for="phoneNumber" class="form-label">Phone Number</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="personnel.PhoneNumber" />
        </div>

        <div class="mb-3">
            <label for="street" class="form-label">Street</label>
            <InputText id="street" class="form-control" @bind-Value="personnel.Street" />
        </div>

        <div class="mb-3">
            <label for="city" class="form-label">City</label>
            <InputText id="city" class="form-control" @bind-Value="personnel.City" />
        </div>

        <div class="mb-3">
            <label for="state" class="form-label">State</label>
            <InputText id="state" class="form-control" @bind-Value="personnel.State" />
        </div>

        <div class="mb-3">
            <label for="postalCode" class="form-label">Postal Code</label>
            <InputText id="postalCode" class="form-control" @bind-Value="personnel.PostalCode" />
        </div>

        <div class="mb-3">
            <label for="country" class="form-label">Country</label>
            <InputText id="country" class="form-control" @bind-Value="personnel.Country" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="Delete">Delete</button>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PersonnelDto? personnel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try {
            personnel = await PersonnelApi.GetPersonnelByIdAsync(Id);

            if (personnel is null)
            {
                NavigationManager.NavigateTo("/Error");
            }
        }
        catch(Exception) {
            NavigationManager.NavigateTo("/Error");
        }
        
    }

    private async Task HandleValidSubmit()
    {
        if (personnel is null)
        {
            return;
        }
        try {
            await PersonnelApi.UpdatePersonnelAsync(personnel);
            NavigationManager.NavigateTo("/staff");
        }
        catch (Exception)
        {
            NavigationManager.NavigateTo("/Error");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/staff");
    }

    private async Task Delete()
    {
        if (personnel is null)
        {
            return;
        }
        
        try {
            await PersonnelApi.DeletePersonnelAsync(personnel.Id);
            NavigationManager.NavigateTo("/staff");
        }
        catch(Exception) {
            NavigationManager.NavigateTo("/Error");
        }
    }
}